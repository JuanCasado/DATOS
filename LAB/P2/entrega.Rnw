\documentclass [a4paper] {article}
\usepackage[utf8]{inputenc}
\title{Ciencia de datos, práctica 2}
\author{Juan Casado Ballesteros, Samuel García Gonzalez, Iván Anaya Martín}
\begin{document}
\maketitle

\begin{abstract}
Para esta práctica vamos a investigar sobre los algoritmos de asociación.
Utilizaremos apriori para analizar cestas de la compra y datos de vehículos.
Posterioremente explicaremos como funciona el algoritmo de apriori y proporcionaremos un pequeño manual sobre cómo utilizarlo.

Para la parte final aplicaremos el algoritmo apriori sobre conjuntos de datos reales.
También estudiaremos otros algoritmos que calculen la asociación y compararemos sus resultados respecto de los de apriori.
Para estos otros algoritmos haremos también un manual sobre cómo utilizarlos.

A lo largo del documento añadiremos gráficas que nos permitirán visualizar los resultados de forma más conveniente.
Pra ello hemos utilizado el paquete arulesViz.
\end{abstract}

\newpage
\tableofcontents
\newpage

<<cargar_funciones_credas, echo=FALSE>>=
library("arulesViz")
library("arules")
library("Matrix")
options(width = 100)

setClass("support_results", slots=list(elements="character", support="numeric"))
setClass("apriori_results", slots=list(cause="support_results", effect="support_results",
              confidence="numeric", support="numeric", lift="numeric", count="numeric"))

newResult <- function(cause, effect, confidence, support, lift, count){
  new_result <- new("apriori_results")
  new_result@cause = cause
  new_result@effect = effect
  new_result@confidence = confidence
  new_result@support = support
  new_result@lift = lift
  new_result@count = count
  new_result
}
newSupport <- function(elements, support){
  new_support <- new("support_results")
  new_support@elements = elements
  new_support@support = support
  new_support
}

countApparitions <- function(matrix, name_combination) {
  cols <- colnames(matrix)
  count <- 0
  for (col in cols){
    complete <- T
    for (name in name_combination){
      complete <- matrix[name, col]&&complete
    }
    if (complete){
      count <- count + 1
    }
  }
  count
}

elementsWithSupport <- function(matrix, support){
  names <- rownames(matrix)
  cols <- colnames(matrix)
  total_cases <- length(cols)
  ans = c()
  for (size in 1:length(names)){
    name_combinations <- combn(names, m=size)
    for (name_index in 1:dim(name_combinations)[2]){
      name_combination <- name_combinations[,name_index]
      apparitions <- countApparitions(matrix, name_combination)
      s <- (apparitions/total_cases)
      if (s >= support)
        ans = c(ans, newSupport(name_combination, s))
    }
  }
  ans
}

f_apriori <- function(matrix, support, confidence) {
  chunks <- c()
  chunk_combinations <- combn(elementsWithSupport(matrix, support), m=2)
  for (chunk_combinations_index in 1:dim(chunk_combinations)[2]){
    test_chunk <- chunk_combinations[,chunk_combinations_index]
    first <- test_chunk[1][[1]]
    second <- test_chunk[2][[1]]
    hole <- c(first@elements, second@elements)
    #Las combinaciones con elementos repetidos en ambos conjuntos son eliminadas
    add <- T
    for (e1 in first@elements)
      for (e2 in second@elements)
        if (e1==e2)
          add <- F
    if (add){
      first_apparitions <- countApparitions(matrix, first@elements)
      second_apparitions <- countApparitions(matrix, second@elements)
      hole_apparitions <- countApparitions(matrix, hole)
      c1 <- (hole_apparitions/first_apparitions)
      c2 <- (hole_apparitions/second_apparitions)
      if((c1>=confidence) || (c2>=confidence)){
        s <- countApparitions(matrix, hole)/length(colnames(matrix))
        lift <- s/(first@support*second@support)
      }
      if(c1 >= confidence)
        chunks <- c(chunks, newResult(first, second, c1, s, lift, hole_apparitions))
      if(c2 >= confidence)
        chunks <- c(chunks, newResult(second, first, c2, s, lift, hole_apparitions))
    }
  }
  chunks
}

toTable <- function(apriori_results){
  cause <- c()
  effect <- c()
  support <- c()
  confidence <- c()
  lift <- c()
  count <- c()
  for (element_index in 1:length(apriori_results)){
    element <- apriori_results[element_index][[1]]
    cause <- c(cause, paste("{",paste(element@cause@elements,collapse=","),"}",sep=""))
    effect <- c(effect, paste("{",paste(element@effect@elements,collapse=","),"}",sep=""))
    support <- c(support, element@support)
    confidence <- c(confidence, element@confidence)
    lift <- c(lift, element@lift)
    count <- c(count, element@count)
  }
  results<-data.frame(cause,"=>",effect,support,confidence,lift,count)
  names(results) <- c("lhs","","rhs","support","confidence", "lift", "count")
  results
}

readAprioriFile <- function(file){
  muestra<-Matrix(as.matrix(read.table(file)), sparse=T)
  muestrangCMatrix<-as(muestra,"nsparseMatrix")
  t(muestrangCMatrix)
}

calapriori<-function(matrix,soporte,confianza){
    transacciones<-as(matrix,"transactions")
    asociaciones <- apriori(transacciones, 
        parameter=list(minlen=2, support=soporte,confidence=confianza), 
        control=list(verbose=F))
    inspect(asociaciones)
    asociaciones
}

caleclat<-function(matrix,soporte){
    transacciones<-as(matrix,"transactions")
    asociaciones <- eclat(transacciones, 
        parameter=list(minlen=2, support=soporte), 
        control=list(verbose=F))
    inspect(asociaciones)
    asociaciones
}
@

\section{Asociación sobre los datos de las cestas de la compra}
Hemos introducido los datos de las cestas de la compra en un fichero .txt para evitar tener que escribirlos varias veces.
Utilizamos funciones que hemos creado para automatizar la lectura del fichero y también para utilizar el algoritmo apriori.
En estas funciones solo realizamos una lectura y una ejecición del algoritmo con los parámetros que nosotros hemos elegido.
En el caso del fichero txt guardamos los elementos como listas de la compra en horizonal y los transformamos a como la función que llama a apriori espera recibirlos.
En la función que llama a apriori configuramos como queremos utilizar el algoritmo de modo que no se nos impriman los detalles de su ejecución
ni se calculen las asociaciones con conjuntos vacíos.

\subsection{Cargar los datos de un .txt}
Convierte la matriz a datos booleanos y la transpone, nos es más fácil escribir los datos en horizontal y transponer que no escribirlos ya como se espera que estén.
<<show_readAprioriFile>>=
readAprioriFile
@

\subsection{Llamar a apriori}
Con minlen=2 indicamos que no queremos calcular asociaciones con el conjunto vacío y con verbose=F que nos queremos obtener el progreso del algoritmo.
<<show_calapriori>>=
calapriori
@

\newpage
\subsection{Calcular asociación}
Calculamos la asociación con soporte 0.5 y confianza 0.8 para los datos de las cestas de la compra.

<<calapriori_of_shop>>=
shop_data = calapriori(readAprioriFile("datos1.txt"),0.5,0.8)
@
Como podemos observar en el resultado de la ejecución del algoritmo apriori, en la muestra de datos es común que, por ejemplo, 
en la misma cesta de la compra, si se ha comprado agua y leche, se compra también pan. Lo mismo sucede entre pan y agua (en ambas direcciones) y 
leche y pan (en ambas direcciones) aunque con una confianza menor.
\begin{center}
<<grafica_apriori_shop_two_key, fig=TRUE>>=
plot(shop_data, method = "two-key plot")
@
<<grafica_apriori_shop_paracoord, fig=TRUE>>=
plot(shop_data, method = "paracoord", control = list(reorder = TRUE))
@
<<grafica_apriori_shop_graph, fig=TRUE>>=
plot(shop_data, method = "graph")
@
\end{center}

\section{Asociación sobre los datos de los vehículos}
Ya habíamos creado las función para leer datos de un .txt y suministrárselos a apriori.
Repetimos el proceso ahora con los datos de los automóbiles iobteniendo los siguentes resultados para un soporte de 0.4 y una confianza de 0.9.


<<calapriori_of_cars>>=
car_data <<- calapriori(readAprioriFile("datos2.txt"),0.4,0.9)
@
Observamos tras ejecutar el algoritmo que los coches que poseen control de velocidad y bluetooth por separado tienen faros de xenon y en conjunto también los tienen,
 pero con menor soporte.
\begin{center}
<<grafica_apriori_car_two_key, fig=TRUE>>=
plot(car_data, method = "two-key plot")
@
<<grafica_apriori_car_paracoord, fig=TRUE>>=
plot(car_data, method = "paracoord", control = list(reorder = TRUE))
@
<<grafica_apriori_car_graph, fig=TRUE>>=
plot(car_data, method = "graph")
@
\end{center}

\section{Qué es apriori y cómo utilizarlo}
El algoritmo a priori surge como respuesta al problema existente a la hora de analizar las reglas de asociación 
entre diferentes datos, puesto que con unas decenas de datos diferentes podemos encontrar miles de reglas diferentes y el
principio en el que se basa es que si un conjunto de datos es frecuente, cualquier subconjunto del mismo también lo será. 
Este algoritmo encuentra reglas de asociación entre diferentes datos en base a dos parámetros que establecemos 
arbitrariamente que tienen que cumplirse en ellas, que son el soporte y la confianza. El soporte de un conjunto de datos se 
define como la proporción de apariciones que contiene dicho conjunto de datos en el espacio muestral. La confianza define 
la probabilidad de encontrar relacionadas una parte derecha de una regla de asociación con una parte izquierda determinadas.

\vspace{5mm}

Invocamos la función escribiendo apriori() y los diferentes parámetros que nos interesan para su uso son los siguientes:
Apriori(data, parameter = NULL, appearance = NULL, control = NULL)
Data: estructura de datos (por ejemplo, una matriz binaria o un data.frame) que se puede convertir en transacciones.
Parameter: diferentes parámetros de la clase APparameter. El comportamiento por defecto de los parámetros importantes es: soporte (support) de 10%, confianza (confidence) del 80% un límite máximo (maxlen) de 10 y mínimo (minlen) de 1 elemento por conjunto de elementos, teniendo en cuenta el conjunto vacio y un tiempo de check (maxtime) máximo de 5 segundos.
Appearance: diferentes parámetros de la clase APappearance. Con esto podemos restringir la aparición de algunos datos.
Control: diferentes parámetros de la clase APcontrol. Controla el rendimiento del algoritmo (sort, heap, filter…) y aspectos como la ordenación o el reporte del rendimiento (verbose).

\newpage
\section{Creación de un algoritmo apriori}
Hemos programado una versión simplificada del algoritmo eliminando algunas de las optimizaciones que este realiza.
La funcionalidad de nuestro algoritmo también es reducida y solo está pensado para tomar como entrada tablas de datos booleanos 
a diferencia del apriori original que puede tomar otros tipos de dato como entrada.
Para implementarlo lo hemos hecho utilizando tres funciones.

Repetimos el cálculo de la asociación para los datos de las cestas de la compra y de los automóbiles comprobando que nuestro algoritmo proporciona
los mismos resultados que apriori nos había dado anteriormente. Comprobamos que el algoritmo se comporta como esperábamos.
<<f_apriori_execution>>=
print(toTable(f_apriori(readAprioriFile("datos1.txt"),0.5,0.8)),right=F)
print(toTable(f_apriori(readAprioriFile("datos2.txt"),0.4,0.9)),right=F)
@

\newpage
\section{Apriori sobre un dataset real}
Buscando informcación sobre el algoritmo apriori y sobre otros algoritmos de asociación hemos encontrado distintas fuentes de las que obtener datos típicos 
sobre los que aplicar algoritmos de asociación.
Hemos elegido un conjunto de datos que están ya incluidos en el paquete arules para probar sobre ellos el comportamiento del algoritmo.

Podemos observar que la asociación puede aplicarse también sobre variables con múltiples valores, no solo verdadero o falso.
Los datos contienen 8993 observaciones en 14 variables. El primer paso para procesarlos es crear clases de equivalencia (2) para cada valor.
Una vez hecho esto solo nos queda crear las transacciones y proporcionárselas al algoritmo apriori.

<<real_association>>=
data("IncomeESL")
@
<<real_association_echo_false, echo=FALSE>>=
IncomeESL <- IncomeESL[complete.cases(IncomeESL), ]
IncomeESL[["income"]] <- factor((as.numeric(IncomeESL[["income"]]) > 6) +1,
  levels = 1 : 2 , labels = c("$0-$40,000", "$40,000+"))
IncomeESL[["age"]] <- factor((as.numeric(IncomeESL[["age"]]) > 3) +1,
  levels = 1 : 2 , labels = c("14-34", "35+"))
IncomeESL[["education"]] <- factor((as.numeric(IncomeESL[["education"]]) > 4) +1,
  levels = 1 : 2 , labels = c("no college graduate", "college graduate"))
IncomeESL[["years in bay area"]] <- factor(
  (as.numeric(IncomeESL[["years in bay area"]]) > 4) +1,
  levels = 1 : 2 , labels = c("1-9", "10+"))
IncomeESL[["number in household"]] <- factor(
  (as.numeric(IncomeESL[["number in household"]]) > 3) +1,
  levels = 1 : 2 , labels = c("1", "2+"))
IncomeESL[["number of children"]] <- factor(
  (as.numeric(IncomeESL[["number of children"]]) > 1) +0,
  levels = 0 : 1 , labels = c("0", "1+"))
@
<<real_association_calc>>=
income <- calapriori(IncomeESL, 0.5,0.9)
@
hay un gran conjunto de datos en la muestra que tienen alto soporte y confianza en que hablen en Ingles en casa.
\begin{center}
<<grafica_apriori_income_two_key, fig=TRUE>>=
plot(income, method = "two-key plot")
@
<<grafica_apriori_income_paracoord, fig=TRUE>>=
plot(income, method = "paracoord", control = list(reorder = TRUE))
@
<<grafica_apriori_income_graph, fig=TRUE>>=
plot(income, method = "graph")
@
\end{center}

Haremos ahora el mismo proceso sobre datos de los supervivientes del titanic.
En este caso, los datos encontrados ya están en formato de transacciones tay y como apriori los espera.
<<>>=
load("./titanic.raw.rdata")
titanic_data <- apriori(titanic.raw, 
      parameter=list(minlen=2, support=0.5,confidence=0.8), 
      control=list(verbose=F))
inspect(titanic_data)
@
Podemos ver que los primeros en salvarse fueron las mujeres y los niños.

\begin{center}
<<grafica_apriori_titanic_data_two_key, fig=TRUE>>=
plot(titanic_data, method = "two-key plot")
@
<<grafica_apriori_titanic_data_paracoord, fig=TRUE>>=
plot(titanic_data, method = "paracoord", control = list(reorder = TRUE))
@
<<grafica_apriori_titanic_data_graph, fig=TRUE>>=
plot(titanic_data, method = "graph")
@
\end{center}

\newpage
\section{Otros algoritmos de asociación}

\subsection{Que es eclat y cómo utilizarlo}
Eclat es una alternativa a apriori que utiliza para cada elemento una lista en la que se registra en qué transacción está el 
elemento mencionado, reduciendo así enormemente el tiempo de cómputo, pero aumentando el consumo de memoria. La idea básica 
es que usa estas listas y realiza intersecciones con otras para calcular el soporte del elemento, evitando generar subconjuntos 
que no existan en el espacio muestral.

Invocamos la función escribiendo eclat() y los diferentes parámetros que nos interesan para su uso son los siguientes:
Eclat(data, parameter = NULL,  control = NULL)
Data: estructura de datos (por ejemplo, una matriz binaria o un data.frame) que se puede convertir en transacciones.
Parameter: diferentes parámetros de la clase ECparameter. El comportamiento por defecto de los parámetros importantes es: soporte (support) de 10% y un límite (maxlen) de 5 elementos por conjunto de elementos.
Control: diferentes parámetros de la clase ECcontrol. Controla el rendimiento del algoritmo (sort, heap, filter…) y aspectos como la ordenación o el reporte del rendimiento (verbose).

\subsubsection{Ejemplos de con eclat}
Ejecución sobre la muestra de los datos de las cestas de la compra.
<<caleclat_of_shop>>=
caleclat(readAprioriFile("datos1.txt"),0.5)
@

Ejecución sobre la muestra de los datos de los componentes de los coches.
<<caleclat_of_cars>>=
caleclat(readAprioriFile("datos2.txt"),0.4)
@

Ejecución sobre la muestra de los datos demográficos incluídos en el paquete arules.
<<caleclat_of_real_data>>=
caleclat(IncomeESL, 0.5)
@

Ejecución sobre la muestra de los datos de los supervivientes del titanic.
<<eclat_of_titanic>>=
inspect(eclat(titanic.raw, parameter=list(minlen=2, support=0.5),
                           control=list(verbose=F)))
@

Podemos observar que obtenemos el mismo soporte que con apriori y que tal y como hemos dicho la confianza no es calculada.
Para compara los resultados de apriori con los de eclat debemos buscar en apriori los conjuntos que se correspondan con los de eclar.

Ej: los conjuntos de apriori: \{Pan\} => \{Agua\} y \{Agua\} => \{Pan\} en eclat serán solo uno: {Pan, Agua}

\end{document}